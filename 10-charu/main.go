package main

import "fmt"

// 插入排序 -稳定排序
// 思路：分为2个数组，一个是已经排好序的，初始化的时候是以第一个下标为数组，另外一个是未排序的数组，那每次都是从未排序的数组取一个排序，去与排好序的中的每个数组比较，找到它适合的位置
func insert(arr1 []int) {

	// 从第二个开始，因为分2个数组，第一个数字默认为第一个数组，比较从第二个数开始
	for i := 1; i < len(arr1); i++ {
		// 记录当前的值，需要进行比较值
		var key = arr1[i]
		// 记录当前下标
		var k = i //注意下面没有用到i了。全部是k
		// k>0 防止数组越界，arr1[i-1] > key意思是拿当前值与前一个值相比较，如果没有前面的值大，需要换位置，并继续和更前面一个值比较
		for k >0 && arr1[k-1] > key{
			arr1[k] = arr1[k-1] // 更换位置，让后面的值等于前面比他大的值
			k-- //指针前移一位
		}
		// 比较完之后就找到key值的下标
		arr1[k] = key
	}
	fmt.Println(arr1)

}

func main() {
	var arr1 = []int{3, 1, 2, 5, 5, 12, 3, 6, 7, 2}
	insert(arr1)
}
